const express = require("express");
const cors = require("cors");
require("dotenv").config();
const { GoogleGenerativeAI } = require("@google/generative-ai"); // Initialize Express app const app = express(); const port = process.env.PORT || 3000; // Initialize Gemini AI const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY); const model = genAI.getGenerativeModel({ model: "gemini-pro" }); // Your portfolio context const portfolioContext = ` You are a helpful AI assistant representing Nirbhay, a web developer with 3 years of experience. Answer questions based on the following information: Nirbhay's Skills: - Frontend: React.js, HTML5, CSS3, JavaScript (ES6+), Responsive UI - Backend: .NET Core, Node.js, Express, REST APIs - Databases: SQL Server, MongoDB - Tools: Postman, JIRA, Git/GitHub, SendGrid - Languages: English, Hindi, Marwadi (Basics) Experience: - Software Engineer I at NewgenDigital (2022 - Present) - Worked on React.js frontends and .NET Core Web APIs - Managed vehicle booking data flows for TVS Motor Company - Optimized SQL queries and API performance - Designed email services using SendGrid - Active in Agile ceremonies: Story Pointing, Sprint Planning, Daily Stand-ups, Sprint Reviews Projects: - E-connect: Anonymous knowledge-sharing platform (MERN stack) - Anonymous posting & discussion with community moderation - Real-time topic feed & tag-based discovery - Bewakoof.com clone: Full-stack e-commerce implementation - Responsive product grid & filters, clean UX - Cart/checkout logic with validation & state persistence Education: - Full-Stack Web Development at Masai School (2021-2022) - B.Tech in Mechanical Engineering from Stani Memorial College (2015-2019) Contact: - Email: nirbhaydalnia@gmail.com - Phone: +91 8233532622 - Location: Jaipur, Rajasthan (303904) Always be helpful and answer questions based on this information. If asked about something not covered, politely indicate you don't have that information. Keep your responses concise and relevant to the question asked. `; // Middleware app.use(cors()); app.use(express.json()); // Basic route app.get('/', (req, res) => { res.json({ message: 'Welcome to Nirbhay Portfolio API!', endpoints: { chat: 'POST /api/chat', health: 'GET /api/health' } }); }); // Health check endpoint app.get('/api/health', (req, res) => { res.json({ status: 'OK', timestamp: new Date().toISOString(), service: 'Nirbhay Portfolio API' }); }); // Chat endpoint app.post('/api/chat', async (req, res) => { try { const { message } = req.body; if (!message) { return res.status(400).json({ error: 'Message is required' }); } // Generate response using Gemini AI const fullPrompt = `${portfolioContext}\n\nUser Question: ${message}\n\nAnswer:`; const result = await model.generateContent(fullPrompt); const response = await result.response; const responseText = response.text(); res.json({ response: responseText, timestamp: new Date().toISOString() }); } catch (error) { console.error('Error:', error); res.status(500).json({ error: 'Internal server error', message: error.message }); } }); // Handle undefined routes app.use('*', (req, res) => { res.status(404).json({ error: 'Endpoint not found' }); }); // Global error handler app.use((error, req, res, next) => { console.error('Unhandled error:', error); res.status(500).json({ error: 'Internal server error', message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong' }); }); // Start server app.listen(port, () => { console.log(`🚀 Server running on port ${port}`); console.log(`📍 Health check: http://localhost:${port}/api/health`); }); module.exports = app;
